//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `checkBox_selected`.
    static let checkBox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkBox_selected")
    /// Image `checkBox_unSelected`.
    static let checkBox_unSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkBox_unSelected")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `cmccLogo`.
    static let cmccLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cmccLogo")
    /// Image `ctccLogo`.
    static let ctccLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ctccLogo")
    /// Image `cuccLogo`.
    static let cuccLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cuccLogo")
    /// Image `icon_eggsClose`.
    static let icon_eggsClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eggsClose")
    /// Image `icon_eggsClosebtn`.
    static let icon_eggsClosebtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eggsClosebtn")
    /// Image `icon_eggsShow`.
    static let icon_eggsShow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eggsShow")
    /// Image `icon_eggsTitle`.
    static let icon_eggsTitle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eggsTitle")
    /// Image `loginBtn_Dis`.
    static let loginBtn_Dis = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginBtn_Dis")
    /// Image `loginBtn_Hig`.
    static let loginBtn_Hig = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginBtn_Hig")
    /// Image `loginBtn_Nor`.
    static let loginBtn_Nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginBtn_Nor")
    /// Image `sharebtn`.
    static let sharebtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharebtn")
    /// Image `windowClose`.
    static let windowClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "windowClose")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkBox_selected", bundle: ..., traitCollection: ...)`
    static func checkBox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkBox_unSelected", bundle: ..., traitCollection: ...)`
    static func checkBox_unSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox_unSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cmccLogo", bundle: ..., traitCollection: ...)`
    static func cmccLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cmccLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ctccLogo", bundle: ..., traitCollection: ...)`
    static func ctccLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ctccLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cuccLogo", bundle: ..., traitCollection: ...)`
    static func cuccLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cuccLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eggsClose", bundle: ..., traitCollection: ...)`
    static func icon_eggsClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eggsClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eggsClosebtn", bundle: ..., traitCollection: ...)`
    static func icon_eggsClosebtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eggsClosebtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eggsShow", bundle: ..., traitCollection: ...)`
    static func icon_eggsShow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eggsShow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eggsTitle", bundle: ..., traitCollection: ...)`
    static func icon_eggsTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eggsTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginBtn_Dis", bundle: ..., traitCollection: ...)`
    static func loginBtn_Dis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBtn_Dis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginBtn_Hig", bundle: ..., traitCollection: ...)`
    static func loginBtn_Hig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBtn_Hig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginBtn_Nor", bundle: ..., traitCollection: ...)`
    static func loginBtn_Nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBtn_Nor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharebtn", bundle: ..., traitCollection: ...)`
    static func sharebtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharebtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "windowClose", bundle: ..., traitCollection: ...)`
    static func windowClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windowClose, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `EggsView`.
    static let eggsView = _R.nib._EggsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EggsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eggsView) instead")
    static func eggsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eggsView)
    }
    #endif

    static func eggsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EggsView? {
      return R.nib.eggsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EggsView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CELLID`.
    static let celliD: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "CELLID")
    /// Reuse identifier `Cellidid`.
    static let cellidid: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "Cellidid")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _EggsView.validate()
    }

    struct _EggsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EggsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EggsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EggsView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_eggsClose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eggsClose' is used in nib 'EggsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eggsClosebtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eggsClosebtn' is used in nib 'EggsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eggsShow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eggsShow' is used in nib 'EggsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eggsTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eggsTitle' is used in nib 'EggsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mnfCellVC = StoryboardViewControllerResource<MNFCellVC>(identifier: "MNFCellVC")
      let mnfHomeVC = StoryboardViewControllerResource<MNFHomeVC>(identifier: "MNFHomeVC")
      let mnfRxSwiftVC = StoryboardViewControllerResource<MNFRxSwiftVC>(identifier: "MNFRxSwiftVC")
      let mnfSwiftUIVC = StoryboardViewControllerResource<MNFSwiftUIVC>(identifier: "MNFSwiftUIVC")
      let mnfTableViewVC = StoryboardViewControllerResource<MNFTableViewVC>(identifier: "MNFTableViewVC")
      let mnfjPhoneLoginVC = StoryboardViewControllerResource<MNFJPhoneLoginVC>(identifier: "MNFJPhoneLoginVC")
      let name = "Home"

      func mnfCellVC(_: Void = ()) -> MNFCellVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mnfCellVC)
      }

      func mnfHomeVC(_: Void = ()) -> MNFHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mnfHomeVC)
      }

      func mnfRxSwiftVC(_: Void = ()) -> MNFRxSwiftVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mnfRxSwiftVC)
      }

      func mnfSwiftUIVC(_: Void = ()) -> MNFSwiftUIVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mnfSwiftUIVC)
      }

      func mnfTableViewVC(_: Void = ()) -> MNFTableViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mnfTableViewVC)
      }

      func mnfjPhoneLoginVC(_: Void = ()) -> MNFJPhoneLoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mnfjPhoneLoginVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().mnfCellVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mnfCellVC' could not be loaded from storyboard 'Home' as 'MNFCellVC'.") }
        if _R.storyboard.home().mnfHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mnfHomeVC' could not be loaded from storyboard 'Home' as 'MNFHomeVC'.") }
        if _R.storyboard.home().mnfjPhoneLoginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mnfjPhoneLoginVC' could not be loaded from storyboard 'Home' as 'MNFJPhoneLoginVC'.") }
        if _R.storyboard.home().mnfRxSwiftVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mnfRxSwiftVC' could not be loaded from storyboard 'Home' as 'MNFRxSwiftVC'.") }
        if _R.storyboard.home().mnfSwiftUIVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mnfSwiftUIVC' could not be loaded from storyboard 'Home' as 'MNFSwiftUIVC'.") }
        if _R.storyboard.home().mnfTableViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mnfTableViewVC' could not be loaded from storyboard 'Home' as 'MNFTableViewVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
